<?php

namespace App\Http\Controllers;

use App\Models\Showtime;
use App\Models\Movie;
use App\Models\Room;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ShowtimeController extends Controller
{
    /**
     * üìã Hi·ªÉn th·ªã danh s√°ch su·∫•t chi·∫øu
     * - Admin: th·∫•y t·∫•t c·∫£
     * - Ng∆∞·ªùi d√πng: ch·ªâ xem danh s√°ch (kh√¥ng l·ªói redirect)
     */
    public function index()
    {
        $query = Showtime::with(['movie', 'room'])->latest();

        // N·∫øu l√† admin ‚Üí hi·ªÉn th·ªã t·∫•t c·∫£
        if (Auth::check() && Auth::user()->role === 'admin') {
            $showtimes = $query->paginate(10);
        } else {
            // Ng∆∞·ªùi d√πng th∆∞·ªùng ch·ªâ xem danh s√°ch chung
            $showtimes = $query->paginate(10);
        }

        return view('showtimes.index', compact('showtimes'));
    }

    /**
     * ‚ûï Form t·∫°o m·ªõi (ch·ªâ admin)
     */
    public function create()
    {
        $this->authorizeAdmin();

        $movies = Movie::all();
        $rooms = Room::all();

        return view('showtimes.create', compact('movies', 'rooms'));
    }

    /**
     * üíæ L∆∞u su·∫•t chi·∫øu m·ªõi (ch·ªâ admin)
     */
    public function store(Request $request)
    {
        $this->authorizeAdmin();

        $request->validate([
            'movie_id'   => 'required|exists:movies,id',
            'room_id'    => 'required|exists:rooms,id',
            'start_time' => 'required|date',
            'price'      => 'required|numeric|min:0',
        ]);

        Showtime::create($request->only(['movie_id', 'room_id', 'start_time', 'price']));

        return redirect()->route('admin.showtimes.index')
                         ->with('success', 'üé¨ Th√™m su·∫•t chi·∫øu th√†nh c√¥ng!');
    }

    /**
     * üëÅÔ∏è Hi·ªÉn th·ªã chi ti·∫øt su·∫•t chi·∫øu
     */
    public function show(Showtime $showtime)
    {
        return view('showtimes.show', compact('showtime'));
    }

    /**
     * ‚úèÔ∏è Form ch·ªânh s·ª≠a (ch·ªâ admin)
     */
    public function edit(Showtime $showtime)
    {
        $this->authorizeAdmin();

        $movies = Movie::all();
        $rooms = Room::all();

        return view('showtimes.edit', compact('showtime', 'movies', 'rooms'));
    }

    /**
     * üîÑ C·∫≠p nh·∫≠t su·∫•t chi·∫øu (ch·ªâ admin)
     */
    public function update(Request $request, Showtime $showtime)
    {
        $this->authorizeAdmin();

        $request->validate([
            'movie_id'   => 'required|exists:movies,id',
            'room_id'    => 'required|exists:rooms,id',
            'start_time' => 'required|date',
            'price'      => 'required|numeric|min:0',
        ]);

        $showtime->update($request->only(['movie_id', 'room_id', 'start_time', 'price']));

        return redirect()->route('admin.showtimes.index')
                         ->with('success', '‚úÖ C·∫≠p nh·∫≠t su·∫•t chi·∫øu th√†nh c√¥ng!');
    }

    /**
     * üóëÔ∏è X√≥a su·∫•t chi·∫øu (ch·ªâ admin)
     */
    public function destroy(Showtime $showtime)
    {
        $this->authorizeAdmin();

        $showtime->delete();

        return redirect()->route('admin.showtimes.index')
                         ->with('success', 'üóëÔ∏è X√≥a su·∫•t chi·∫øu th√†nh c√¥ng!');
    }

    /**
     * üîí H√†m ph·ª• ki·ªÉm tra quy·ªÅn admin
     */
    private function authorizeAdmin()
    {
        if (!Auth::check() || Auth::user()->role !== 'admin') {
            abort(403, 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y.');
        }
    }
}
